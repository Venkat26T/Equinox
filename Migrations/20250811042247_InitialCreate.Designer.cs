// <auto-generated />
using System;
using Equinox.Models.DataLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Equinox.Migrations
{
    [DbContext(typeof(EquinoxContext))]
    [Migration("20250811042247_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.7");

            modelBuilder.Entity("Equinox.Models.DomainModels.Booking", b =>
                {
                    b.Property<int>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EquinoxClassId")
                        .HasColumnType("INTEGER");

                    b.HasKey("BookingId");

                    b.HasIndex("EquinoxClassId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("Equinox.Models.DomainModels.ClassCategory", b =>
                {
                    b.Property<int>("ClassCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Image")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("ClassCategoryId");

                    b.ToTable("ClassCategories");

                    b.HasData(
                        new
                        {
                            ClassCategoryId = 1,
                            Name = "Yoga"
                        },
                        new
                        {
                            ClassCategoryId = 2,
                            Name = "HIIT"
                        },
                        new
                        {
                            ClassCategoryId = 3,
                            Name = "Boxing"
                        });
                });

            modelBuilder.Entity("Equinox.Models.DomainModels.Club", b =>
                {
                    b.Property<int>("ClubId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ClubId");

                    b.ToTable("Clubs");

                    b.HasData(
                        new
                        {
                            ClubId = 1,
                            Name = "Chicago Loop",
                            PhoneNumber = "812-234-4563"
                        },
                        new
                        {
                            ClubId = 2,
                            Name = "Lincoln Park",
                            PhoneNumber = "630-567-4561"
                        },
                        new
                        {
                            ClubId = 3,
                            Name = "Wheaton Park",
                            PhoneNumber = "456-567-4561"
                        });
                });

            modelBuilder.Entity("Equinox.Models.DomainModels.EquinoxClass", b =>
                {
                    b.Property<int>("EquinoxClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClassCategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClassDay")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ClassPicture")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ClubId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Time")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("EquinoxClassId");

                    b.HasIndex("ClassCategoryId");

                    b.HasIndex("ClubId");

                    b.HasIndex("UserId");

                    b.ToTable("Classes");

                    b.HasData(
                        new
                        {
                            EquinoxClassId = 1,
                            ClassCategoryId = 1,
                            ClassDay = "Saturday",
                            ClassPicture = "hatha.jpg",
                            ClubId = 1,
                            Name = "Hatha Yoga",
                            Time = "8 AM – 9 AM",
                            UserId = 1
                        },
                        new
                        {
                            EquinoxClassId = 2,
                            ClassCategoryId = 2,
                            ClassDay = "Friday",
                            ClassPicture = "hiit.jpg",
                            ClubId = 2,
                            Name = "HIIT Junior",
                            Time = "6 PM – 7 PM",
                            UserId = 2
                        },
                        new
                        {
                            EquinoxClassId = 3,
                            ClassCategoryId = 2,
                            ClassDay = "Monday",
                            ClassPicture = "hiit2.jpg",
                            ClubId = 3,
                            Name = "HIIT Senior",
                            Time = "6 PM – 7 PM",
                            UserId = 3
                        });
                });

            modelBuilder.Entity("Equinox.Models.DomainModels.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsCoach")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            DOB = new DateTime(2000, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "john@example.com",
                            IsCoach = true,
                            Name = "Peter John",
                            PhoneNumber = "456-678-2345"
                        },
                        new
                        {
                            UserId = 2,
                            DOB = new DateTime(1978, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "parker@example.com",
                            IsCoach = true,
                            Name = "Peter Parker",
                            PhoneNumber = "675-678-2345"
                        },
                        new
                        {
                            UserId = 3,
                            DOB = new DateTime(1988, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "adam@example.com",
                            IsCoach = true,
                            Name = "Scot Adam",
                            PhoneNumber = "675-123-2345"
                        });
                });

            modelBuilder.Entity("Equinox.Models.DomainModels.Booking", b =>
                {
                    b.HasOne("Equinox.Models.DomainModels.EquinoxClass", "EquinoxClass")
                        .WithMany()
                        .HasForeignKey("EquinoxClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EquinoxClass");
                });

            modelBuilder.Entity("Equinox.Models.DomainModels.EquinoxClass", b =>
                {
                    b.HasOne("Equinox.Models.DomainModels.ClassCategory", "ClassCategory")
                        .WithMany()
                        .HasForeignKey("ClassCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Equinox.Models.DomainModels.Club", "Club")
                        .WithMany()
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Equinox.Models.DomainModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClassCategory");

                    b.Navigation("Club");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
